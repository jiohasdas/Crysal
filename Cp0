print("💎 Starting script...")

-- AC Bypasser
print("💎 Loading AC Bypasser...")

local function loadACBypass(url)
    local success, err = pcall(function()
        loadstring(game:HttpGet(url, true))()
    end)
    if success then
        print("✅ AC Bypass part loaded: " .. url)
    else
        print("❌ Failed to load AC Bypass part: " .. url .. " - Error: " .. err)
    end
    return success
end

local acScripts = {
    "https://raw.githubusercontent.com/shakar60/scripts/refs/heads/main/ac%20bypass",
    "https://raw.githubusercontent.com/Pixeluted/adoniscries/main/Source.lua",
    "https://raw.githubusercontent.com/RelkzzRebranded/Bypassed---OBFUSCATED..../main/Adonis%20BYPASS.lua"
}

for _, url in ipairs(acScripts) do
    if not loadACBypass(url) then
        print("❌ AC Bypass failed, stopping further execution.")
        return
    end
    task.wait(2)
end

print("✅ AC Bypass Loaded")

local plr = game:GetService("Players").LocalPlayer
local cclosure = syn_newcclosure or newcclosure or nil

if not cclosure or not hookmetamethod then
    plr:Kick("\n\nYour exploit doesn't support hookmetamethod\n")
end

local oldNamecall
oldNamecall = hookmetamethod(game, "__namecall", cclosure(function(self, ...)
    local NamecallMethod = getnamecallmethod()
    local args = { ... }
    if (NamecallMethod == "Kick" or NamecallMethod == "kick") and not checkcaller() then
        if self ~= plr then
            return oldNamecall(self, ...)
        end
        return
    end
    return oldNamecall(self, ...)
end))

for wendigo, iscool in pairs(getgc(true)) do
    if pcall(function() return rawget(iscool, "indexInstance") end) 
    and type(rawget(iscool, "indexInstance")) == "table" 
    and rawget(iscool, "indexInstance")[1] == "kick" then
        iscool.tvk = {"kick", function() 
            return game.Workspace:WaitForChild("") 
        end}
    end
end

local getinfo = getinfo or debug.getinfo
local DEBUG = false
local Hooked = {}

local Detected, Kill

setthreadidentity(2)

for i, v in getgc(true) do
    if typeof(v) == "table" then
        local DetectFunc = rawget(v, "Detected")
        local KillFunc = rawget(v, "Kill")

        if typeof(DetectFunc) == "function" and not Detected then
            Detected = DetectFunc

            local Old; Old = hookfunction(Detected, function(Action, Info, NoCrash)
                if Action ~= "_" then
                    if DEBUG then
                        warn("Adonis AntiCheat flagged\nMethod: {Action}\nInfo: {Info}")
                    end
                end
                return true
            end)

            table.insert(Hooked, Detected)
        end

        if rawget(v, "Variables") and rawget(v, "Process") and typeof(KillFunc) == "function" and not Kill then
            Kill = KillFunc
            local Old; Old = hookfunction(Kill, function(Info)
                if DEBUG then
                    warn("Adonis AntiCheat tried to kill (fallback): {Info}")
                end
            end)

            table.insert(Hooked, Kill)
        end
    end
end

local Old; Old = hookfunction(getrenv().debug.info, newcclosure(function(...)
    local LevelOrFunc, Info = ...

    if Detected and LevelOrFunc == Detected then
        if DEBUG then
            warn("Adonis AntiCheat sanity check detected and broken")
        end
        return coroutine.yield(coroutine.running())
    end

    return Old(...)
end))

Bypass = true

local GameMT = getrawmetatable(game)
local OldIndexFunc = GameMT.__index
local OldNamecallFunc = GameMT.__namecall
setreadonly(GameMT, false)
if (Bypass == true) then
    GameMT.__namecall = newcclosure(function(self, ...) 
        local NamecallArgs = {...}

        local DETECTION_STRINGS = 
        {
            'CHECKER_1',
            'CHECKER',
            'OneMoreTime',
            'checkingSPEED',
            'PERMAIDBAN',
            'BANREMOTE',
            'FORCEFIELD',
            'TeleportDetect',
        }

        if (table.find(DETECTION_STRINGS, NamecallArgs[1]) and getnamecallmethod() == 'FireServer') then 
            return
        end
        local suc, err = pcall(getfenv, 2)
        if not (err) then 
            if getfenv(2).crash then 
                hookfunction(getfenv(2).crash, function() 
                    
                end)
            end
        end
        return OldNamecallFunc(self, ...)
    end)
end

for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
    task.wait()
    con:Disable()
end
for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
    task.wait()
    con:Disable()
end

print("✅ AC Bypasser fully loaded, proceeding to UI...")

-- UI Script
print("💎 Loading UI...")

-- Set proper thread identity before loading UI
local function safeLoadUI()
    local success, result = pcall(function()
        -- Set thread identity to 7 (plugin security level)
        setidentity(7)
        -- Or use this alternative if setidentity isn't available
        -- syn.set_thread_identity(7)
        
        local lib = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/UI-Libs/main/Vape.txt"))()
        
        local win = lib:Window("Crystal Scripts", Color3.fromRGB(255, 134, 236), Enum.KeyCode.RightControl)
        
        local Main = win:Tab("Main")
        local KeyBinds = win:Tab("KeyBinds")
        
        Main:Toggle("Green Been (Press Q to activate)", false, function(t)
            local UserInputService = game:GetService("UserInputService")
            local VirtualInputManager = game:GetService("VirtualInputManager")
            local shooting = false
        
            local function holdE()
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.E, false, game)
            end
        
            local function releaseE()
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.E, false, game)
            end
        
            local function doAutoGreen()
                if not shooting then
                    shooting = true
                    holdE()
                    task.wait(0.332)
                    releaseE()
                    task.wait(0.2)
                    shooting = false
                end
            end
        
            UserInputService.InputBegan:Connect(function(input, gameProcessed)
                if not gameProcessed and input.KeyCode == Enum.KeyCode.Q then
                    doAutoGreen()
                end
            end)
        end)
        
        Main:Toggle("Auto Guard", false, function(t)
            local UserInputService = game:GetService("UserInputService")
            local VirtualInputManager = game:GetService("VirtualInputManager")
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            local RunService = game:GetService("RunService")
            local isGuarding = false
            
            local function hasBasketball(model)
                if typeof(model) == "Instance" and model:IsA("Model") then
                    return model:FindFirstChild("Basketball") ~= nil
                end
                return false
            end
            
            local function getTargetWithBall()
                for _, model in pairs(workspace:GetChildren()) do
                    if model:IsA("Model") and hasBasketball(model) and model.Name ~= LocalPlayer.Name then
                        return model
                    end
                end
                return nil
            end
            
            local function directMove(target)
                if not target or not LocalPlayer.Character then return end
                local root = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not root then return end
                
                local targetPos = target:GetPivot().Position
                local myPos = root.Position
                
                -- Reset all keys first
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
                
                -- Always face target instantly
                root.CFrame = CFrame.lookAt(root.Position, targetPos)
                
                -- Get direct vector to target
                local toTarget = (targetPos - myPos) * Vector3.new(1, 0, 1)
                local distance = toTarget.Magnitude
                
                -- Optimal guard distance
                local optimalDistance = 2.8 -- Tighter guarding
                
                -- Direct movement based on distance
                if distance > optimalDistance then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.W, false, game)
                elseif distance < optimalDistance - 0.5 then
                    VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.S, false, game)
                end
                
                -- Match lateral movement instantly
                local rightVector = root.CFrame.RightVector
                local lateralMovement = target.HumanoidRootPart.Velocity * Vector3.new(1, 0, 1)
                local rightDot = lateralMovement:Dot(rightVector)
                
                if math.abs(rightDot) > 0.1 then
                    if rightDot > 0 then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.D, false, game)
                    else
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.A, false, game)
                    end
                end
                
                -- Always hold F while in range
                VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.F, false, game)
                
                -- Update camera to stay locked on target
                workspace.CurrentCamera.CFrame = CFrame.new(
                    workspace.CurrentCamera.CFrame.Position,
                    targetPos
                )
            end
            
            local vKeyConnection
            local guardConnection
            
            if t then
                vKeyConnection = UserInputService.InputBegan:Connect(function(input, gameProcessed)
                    if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
                        isGuarding = true
                    end
                end)
                
                UserInputService.InputEnded:Connect(function(input, gameProcessed)
                    if not gameProcessed and input.KeyCode == Enum.KeyCode.V then
                        isGuarding = false
                        -- Reset all keys
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
                    end
                end)
                
                guardConnection = RunService.RenderStepped:Connect(function() -- Using RenderStepped for smoother movement
                    if isGuarding and not hasBasketball(LocalPlayer.Character) then
                        local target = getTargetWithBall()
                        if target then
                            directMove(target)
                        else
                            VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                        end
                    end
                end)
            else
                if vKeyConnection then vKeyConnection:Disconnect() end
                if guardConnection then guardConnection:Disconnect() end
                isGuarding = false
                -- Reset all keys
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.F, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.W, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.S, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.A, false, game)
                VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.D, false, game)
            end
        end)
        
        Main:Toggle("Auto Block", false, function(t)
            print(t)
        end)
        
        Main:Slider("Ball Mag Distance", 0, 40, 10, function(v)
            _G.BallMagDistance = v
        end)

        Main:Toggle("Ball Mag", false, function(t)
            local RunService = game:GetService("RunService")
            local Players = game:GetService("Players")
            local LocalPlayer = Players.LocalPlayer
            
            local function updateBallMag()
                for _, ball in pairs(workspace:GetChildren()) do
                    if ball.Name == "Basketball" then
                        -- Create/update visual hitbox
                        if not ball:FindFirstChild("MagHitbox") then
                            local hitbox = Instance.new("Part")
                            hitbox.Name = "MagHitbox"
                            hitbox.Anchored = true
                            hitbox.CanCollide = false
                            hitbox.Transparency = 0.5
                            hitbox.Color = Color3.fromRGB(0, 157, 255)
                            hitbox.Material = Enum.Material.ForceField
                            hitbox.Parent = ball
                        end
                        
                        local hitbox = ball.MagHitbox
                        hitbox.Size = Vector3.new(_G.BallMagDistance, _G.BallMagDistance, _G.BallMagDistance)
                        hitbox.CFrame = ball.CFrame
                        
                        -- Instant ball collection
                        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
                            local distance = (ball:GetPivot().Position - LocalPlayer.Character:GetPivot().Position).Magnitude
                            
                            if distance <= _G.BallMagDistance * 0.6 then
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, ball, 0)
                                firetouchinterest(LocalPlayer.Character.HumanoidRootPart, ball, 1)
                            end
                        end
                    end
                end
            end
            
            local connection
            if t then
                connection = RunService.RenderStepped:Connect(updateBallMag) -- Using RenderStepped for instant response
            else
                if connection then
                    connection:Disconnect()
                end
                
                -- Clean up hitboxes
                for _, ball in pairs(workspace:GetChildren()) do
                    if ball.Name == "Basketball" then
                        local hitbox = ball:FindFirstChild("MagHitbox")
                        if hitbox then
                            hitbox:Destroy()
                        end
                    end
                end
            end
        end)
        
        Main:bind("Green Been", Enum.KeyCode.N, function()
            print("Pressed!")
        end)
        
        Main:bind("Auto Guard", Enum.KeyCode.V, function()
            print("Pressed!")
        end)
        
        Main:bind("Auto Block", Enum.KeyCode.B, function()
            print("Pressed!")
        end)
    end)
    
    if not success then
        warn("Failed to load UI: " .. tostring(result))
    else
        print("✅ UI loaded successfully.")
    end
end

-- Run the UI loader
safeLoadUI()
